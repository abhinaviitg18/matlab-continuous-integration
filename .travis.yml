# We pretend to be Java because we need GNU Octave which is not 
# available (as of January 2016)
language: java

################################################################################
cache:
  # Downloading octave takes a while, so let's cache apt
  - apt

################################################################################
# Command to install dependencies
before_install:
  # Remember the directory where our repository to test is located
  - pwd
  - REPOPATH=`pwd`
  # ----------------------------------------------------------------------------
  # Check whether we need to upgrade the gcc and g++ versions. We do need to if
  # the version is less the 4.8 and we need to install the image package from
  # Octave Forge (possibly for other packages as well).
  # For now, lets just always say we do need to do this.
  - UPGRADE_GCC="true"
  # ----------------------------------------------------------------------------
  # Add repository for octave
  - sudo add-apt-repository -y ppa:octave/stable
  # Add repository for installing g++-4.8 on Ubuntu 12.04
  - if [ "$UPGRADE_GCC" = "true" ]; then
      sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test;
    fi
  # Update apt-get to include the contents from the new locations
  - sudo apt-get update -qq
  # Install octave with apt-get
  - sudo apt-get install -y octave liboctave-dev
  # Add a C++11 compiler so we can install image package
  - if [ "$UPGRADE_GCC" = "true" ]; then
      sudo apt-get install -y gcc-4.8 g++-4.8;
      sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 50;
      sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 50;
    fi;
  # Check which versions of g++ and gcc we are using
  - which g++
  - g++ --version
  - which gcc
  - gcc --version
  # ----------------------------------------------------------------------------
  # Go up one level and retrieve MOxUnit from its repository
  - cd ..
  - ls -alh
  # Remove directory if it is already there from previous build
  - if [ -d MOxUnit ]; then rm -r MOxUnit; fi;
  - git clone https://github.com/MOxUnit/MOxUnit.git
  # Install MOxUnit, which adds itself to the startup path
  - make -C MOxUnit install
  # Go back to the repository directory
  - cd ${REPOPATH}
  # ----------------------------------------------------------------------------
  # Define a helper function which installs dependencies listed in a file from
  # Octave Forge and makes sure they are loaded whenever octave is launched.
  - function install_packages {
        touch ~/.octaverc;
        while read PN; do
          PN="$(echo $PN | sed 's/^\([^=<>]*\).*/\1/')";
          echo "";
          echo "==================================================================";
          echo "Installing $PN from Octave Forge";
          echo "------------------------------------------------------------------";
          travis_retry octave -q --eval "pkg install -forge $PN ";
          octave -q --eval "pkg install -forge $PN ";
          if [[ $? -ne 0 ]]; then
            echo "Failed to install $PN from forge";
            return 1;
          fi;
          echo "pkg load $PN;" >> ~/.octaverc;
          if [[ $? -ne 0 ]]; then
            echo "Failed to add pkg load $PN instruction to .octaverc";
            return 1;
          fi;
        done < $1;
    }

################################################################################
install:
  # Install required packages from Octave Forge
  - if [ -f requirements.txt ]; then
      install_packages requirements.txt;
    fi;

################################################################################
before_script:
  # Double-check we are still in the right directory
  - pwd
  # Check what octave packages we have installed
  - octave -q --eval "ver"
  # ----------------------------------------------------------------------------
  # Set up folders for test results
  - if [ "$SHIPPABLE" = "true" ]; then
      mkdir -p shippable/testresults;
      mkdir -p shippable/codecoverage;
    fi;

################################################################################
script:
  - PATH_COMMAND="addpath(genpath(fullfile(pwd,'package_name')));"
  - TEST_COMMAND="exit(~moxunit_runtests('tests','-verbose','-junit_xml','testresults.xml'));"
  - octave -q --eval "$PATH_COMMAND $TEST_COMMAND";

################################################################################
after_script:
  # Check where we ended up and what's going on where we are
  - pwd
  - ls -alh
  # ----------------------------------------------------------------------------
  # Move results and coverage files into appropriate places
  - if [ "$SHIPPABLE" = "true" ] && [ -f testresults.xml ]; then
      mv testresults.xml shippable/testresults/;
    fi;
  - if [ "$SHIPPABLE" = "true" ] && [ -f coverage.xml ]; then
      mv coverage.xml shippable/codecoverage/;
    fi;
